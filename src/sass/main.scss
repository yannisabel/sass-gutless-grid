@import 'variables';
@import 'colors';
@import 'mixins';
@import 'functions';

@font-face {
    @include font-face('Roboto', normal, fonts/roboto/roboto_regular/Roboto-Regular);
}

*,
*:after,
*:before {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    padding: 50px 0 0;
    background: $white;
    font-family: $fontDefault;
    line-height: 2em;
    color: $fontColorBase;
}
h1 {
    margin-top: 0;
    font-size: $fontXLarge;
    font-weight: 600;
    line-height: 40px;
    span {
        display: inline-block;
        padding-bottom: 0.5em;
        font-weight: 700;
        text-transform: uppercase;
        color: $colorGrayLight;
    }
}
h2 {
    margin: 0 0 1.5em;
    border-bottom: 1px solid $colorGrayLighter;
    padding-bottom: 0.5em;
    font-weight: normal;
    text-transform: uppercase;
    color: $blue;
    &:nth-child(n+2) {
        margin-top: 2em;
    }
}
img {
    width: auto;
    max-width: 100%;
    height: auto !important;
}
a {
    outline: none;
    color: inherit;
}
ul {
    @include uList(inside, disc)
}
pre {
    border: 1px solid $colorGrayLighter;
    border-radius: 0;
    background-color: lighten($colorGrayLighter, 80%);
    color: $blue;
}
code {
    border-radius: 0;
    background-color: $blueCode;
    color: $blue;
}
.right {
    float: right;
}
.left {
    float: left;
}
[class*='col-md']{
    border: none !important;
    margin-left:0 !important;
}
[class*='col-md'].right{
    float: right !important;
}
.navbar {
    border: none;
    background: $blue;
    & a {
        color: colorOnBackground($blue) !important;
        &:focus,
        &:hover {
            background: $colorGrayLighter !important;
        }
    }
}
#masthead {
    margin: 20px 0 40px;
    border-bottom: 1px solid $colorGrayLighter;
    padding-bottom: 40px;
}
.container {
    p {
        margin-top: 1.5em;
        margin-bottom: 0;
        a {
            font-weight: 600;
            text-decoration: underline;
            color: $blue;
        }
    }
    #leftCol{
        #sidebar {
            li.active {
                background: $blue;
                color: colorOnBackground($blue);
                & a:hover {
                    background: $colorGrayLighter;
                    color: colorOnBackground($colorGrayLighter);
                }
                & a:focus {
                    background: transparent;
                    color: colorOnBackground($blue);
                }
            }
        }
    }
    .nav > li > a:focus {
        background-color: transparent;
    }
    .affix,
    .affix-top {
        position: static;
    }
    @media (min-width: 992px) {
        #sidebar.affix-top {
            position: static;
            top: 30px;
            width: 228px;
        }
        #sidebar.affix {
            position: fixed;
            top: 70px;
            width: 228px;
        }
    }
    .content-doc {
        padding-bottom: 6em;
        font-size: $fontBase !important;
    }
}
//_________________THE GRID_________________//
//______Include the mixins in a loop________//
@for $i from 1 through $total-col {
  // simple grid with gutter
  .col-#{$i} { @include grid($i, true); }
  // simple grid without gutter
  .col-#{$i}-gutless { @include grid($i, false); }
  // offset system
  .col-#{$i}-offset {
    @include offset($i, true);
    // Deal with the first child. Add the margin-left
    &:first-child{
      @extend .col-#{$i}-offset;
    }
    // Deal with the last child. Add gutter-width to margin-left
    &:last-child{
        margin-left: (100% + $gutter-width) / ($total-col / $i) + $gutter-width !important;
    }
  }
  // If the block is alone.
  .col-#{$i}-offset-alone {
    margin-left: 100% / ($total-col / $i) + (($gutter-width * $i) / $total-col) !important;
    &:first-child{
      @extend .col-#{$i};
      @extend .col-#{$i}-offset-alone;
    }
  }
  // offset system without gutter
  .col-#{$i}-offset-gutless {
    @include offset($i, false);
    &:first-child{
      @extend .col-#{$i}-offset-gutless;
    }
    // Deal with the last child. remove gutter of the calcul
    &:last-child{
        margin-left: 100% / ($total-col / $i) !important;
    }
  }
}
// general properties for selector with class that contains 'col-'
[class*='col-'] {
    float: left;
    margin-left: $gutter-width;
    margin-bottom:$gutter-width;
    border:1px solid $blue;
    &:first-child {
        margin-left: 0;
    }
}
// general properties for selector with class that contains '-gutless'
[class*='-gutless'] {
    margin-bottom:0;
    margin-left: 0;
    &:first-child {
        margin-left: 0;
    }
}

//____________________START STYLING____________________//
body {
    box-sizing: border-box;
    font-family: sans-serif;
}
#grid{
    width:848px;
    .content{
        width:100%;
        header{
            margin-bottom:$gutter-width;
            padding:0.3rem;
            background:$blue;
            font-family:sans-serif;
            font-size:$fontLarge;
            text-align:center;
            color:$fontColor;
        }
        &.gutless{
            margin-bottom: $gutter-width;
        }
        .wrap {
            overflow: hidden;
        }
    }
}

.block{
    height: 3.5rem;
    box-sizing: border-box;
    background: $dark-blue;
    font-size: $fontBase;
    text-align:center;
    line-height: 3.5rem;
    color: $fontColor;
}
//__________Include Breakpoint Mixins__________//
@include respond-to(small) {
    #grid{
        width: 100%;
    }
    .block{
        width: 100%;
        margin-left: 0;
    }
    [class*='col-'] {
        float: none;
    }
    // general properties for selector with class that contains 'offset'
    [class*='offset'] {
        margin-left: 0;
        width: 100%;
    &:first-child {
        margin-left: 0 !important;
    }
    &:last-child {
        @extend [class*='offset']:first-child;
    }
    }
    // general properties for selector with class that contains 'offset-alone'
    [class*='offset-alone'] {
        width:100% !important;
    }
} // end small screen
@include respond-to(medium) {
    #grid{
        width:100%;
        [class*='col-'] {
            float: left;
        }
    }
    [class*='col-'] {
        float: none;
    }
} // end medium screen
@include respond-to(large) {
    #grid{
        width:100%;
        [class*='col-'] {
            float: left;
        }
    }
    [class*='col-'] {
        float: left;
    }
} //end large screen
@include respond-to(wide) {
    #grid{
        width: 1170px;
    }
} //end wide screen
